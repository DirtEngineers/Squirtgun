Background:
Tracking fluid levels in individual phials is proving far too complex from a development and item management point of view.

Current approach:
The gun stacks to 1 and holds a phial for use.
Phials stack to whatever and individually tracks the chemical, fluid, and shots available.
That is the part presenting the problem.

Proposed solution:
A chemical phial would hold a reference to the particular chemical (as per current).                                    DONE
Add the chemical reference to the gun                                                                                   DONE
Migrate the fluid and shot capacity functionality to the gun                                                            DONE
Add these to the NBT data for the gun.                                                                                  DONE
Phials are one-shot in that when they are loaded into the gun, the gun does its thing and returns an Empty phial item.  DONE
The actual fluid is only dealt with when the gun makes a slug to fire.                                                  DONE
Modify reload screen accordingly                                                                                        DONE

Investigate:
HUD Keybind cycle between ON, Off, and Fade
HUD should fade out after swapping to the item - like, when you first hold it in, that pops up, but it goes away after 5-10 seconds


Here's how Reliquary handles it:
    private void spawnEmptyMagazine(PlayerEntity player) {
        ItemStack emptyMagazine = new ItemStack(ModItems.EMPTY_MAGAZINE);
        if(!player.inventory.addItemStackToInventory(emptyMagazine)) {
            player.entityDropItem(emptyMagazine, 0.1F);
        }
    }

    AlchemyPacket interface for defining your own packets:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/api/network/AlchemyPacket.java

    AbstractPacketHandler for setting up your simple network channel:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/api/network/AbstractPacketHandler.java

    Implemented PacketHandler so you can see how it needs to be setup:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/common/network/PacketHandler.java

    Example packets in AlchemyLib:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/common/network/BlockEntityPacket.java
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/common/network/SearchPacket.java
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/common/network/ToggleLockButtonPacket.java
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/common/network/TogglePauseButtonPacket.java

    Registration of packet handler and getter in main mod class:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/AlchemyLib.java#L20

    An example of one of the packets being sent:
    https://github.com/SmashingMods/AlchemyLib/blob/1.19.x/src/main/java/com/smashingmods/alchemylib/api/blockentity/container/AbstractProcessingMenu.java#L53
    This is server to client however.


Image
This is in the player class.
The packet context has a reference to the player.
Image
So you would do player.drop(yourItem, false);
It will drop the item relative to the player's position in the world.
